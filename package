package()
{
  packaging="$1/dune-common/bin/dunepackaging.py"
  if [ ! -f $packaging ]; then
    packaging="dunepackaging.py"
  fi

  # check if the commit is tagged. If tagged use the tag as
  # version number (assumes the tag is a valid python package version, i.e., v2.8.0rc1
  # otherwise use the default 'dev' numbering.
  # Note: the current commit could have multiple tags - make sure to use the latest
  tag=$(git tag --contains | sort | tail -1)

  if [ "$tag" = "" ]; then
    echo "Use dev versioning"
    $packaging --onlysdist
  else
    echo "Use version" $tag
    $packaging --onlysdist --version=$tag
  fi
}

clonemodule()
{
  set +e
  m=$1 # module name
  p=$2 # path to module
  v=$3 # version tag to check if available on pypi
  t=$4 # tag/branch to try to clone into - master used if not available
  echo "cloning called for module:$m path:$p version:$v tag:$t into $PWD"
  # test if package with this version is already uploaded to pypi
  # if it is no new package will be build and the pypi package is used

  # check whether this is a bugfix version, i.e. -r in version tag
  REV=`echo $v | grep "\-r"`
  if ! python3 ../testpypi.py $m $v ; then
      echo "Try cloning from $p branch $t"
      git clone --depth 1 -b $t $p # > /dev/null 2>&1
      if [ ! $? = 0 ]; then # the branch/tag didn't exist so use master - if no upload is to be done
        if [ ! "$upload" = "none" ] && [ ! "$upload" = "" ] && [ "$REV" = "" ]; then
          echo "required branch $t not found in $m - this inconsistent state for non-bugfix version and should not be uploaded."
          echo "Rerun test with 'upload=none'."
          exit 1
        fi
        # if not bugfix then clone master at this point
        if [ "$REV" == "" ]; then
          echo "using master since $t branch not found!"
          git clone --depth 1 $p # > /dev/null 2>&1
        else
          echo "required branch $t not found in $m - for bugfix versions matching package will be downloaded from pypi."
        fi
      else
        cd $m
        git log | head
        package $base
        cd ..
      fi
  else
      echo "module with this version found on $upload - using that instead of cloning"
  fi
  set -e
}


