# download modules
coremodules=(
  'core/dune-common.git'
  'core/dune-geometry.git'
  'core/dune-grid.git'
  'core/dune-istl.git'
  'core/dune-localfunctions.git'
  'extensions/dune-alugrid.git'
)
femmodules=(
  'dune-fem/dune-fem.git'
  'dune-fem/dune-fem-dg.git'
  'dune-fem/dune-vem.git'
)

ls .
echo Downloading dune-common into $PWD
git clone --depth 1 -b $1 https://gitlab.dune-project.org/dune-common.git

mkdir dist
mkdir repos
cd repos
echo "Cloning core modules into $PWD"
for m in "${coremodules[@]}"; do
  if ! python3 ../testpypi.py $m $1 ; then
      echo "Cloning $m branch $1"
      git clone --depth 1 -b $1 https://gitlab.dune-project.org/$m
  fi
done
echo "Cloning fem modules into $PWD"
for m in "${femmodules[@]}"; do
  if ! python3 ../testpypi.py $m $2 ; then
      echo "Cloning $m branch $2"
      git clone --depth 1 -b $2 https://gitlab.dune-project.org/$m
  fi
done


package()
{
  # check if the commit in dune-common is tagged. If tagged use the tag as
  # version number (assumes the tag is a valid python package version, i.e., v2.8.0rc1
  # otherwise use the default 'dev' numbering.
  tag=$(git describe --exact-match --tags 2> \dev\null)
  if [ $? -eq 0 ]; then
    echo "Use version" $version
    $packaging --onlysdist --version=$tag
  else
    echo "Use dev versioning"
    $packaging --onlysdist
  fi
}
export packaging=$PWD/../dune-common/bin/dunepackaging.py
export -f package
echo "Calling dunecontrol from $PWD"
ls ..
../dune-common/bin/dunecontrol exec package

mv */dist/*.tar.gz ../dist
cd ..
rm -rf repos
