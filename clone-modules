set +e

coretag=$1
femtag=$2
if [ $3 = "none" ]; then
  upload=0
else
  upload=1
fi
coreversion="${1:1}"
femversion="${2:1}"

echo "versions: $coreversion, $femversion (tags $coretag, $femtag)"
ls .
echo Downloading dune-common into $PWD
git clone --depth 1 -b $coretag https://gitlab.dune-project.org/core/dune-common.git
if [ $? ]; then # the branch/tag didn't exist so use master
  git clone --depth 1 https://gitlab.dune-project.org/core/dune-common.git
fi
base=$PWD
mkdir dist
mkdir repos

. package
export -f package

cd repos

#################################

# download modules into repos
declare -A coremodules
coremodules+=(
  [dune-common]='core/dune-common.git'
  [dune-geometry]='core/dune-geometry.git'
  [dune-grid]='core/dune-grid.git'
  [dune-istl]='core/dune-istl.git'
  [dune-localfunctions]='core/dune-localfunctions.git'
  [dune-alugrid]='extensions/dune-alugrid.git'
)
declare -A femmodules
femmodules=(
  [dune-fem]='dune-fem/dune-fem.git'
  [dune-fem-dg]='dune-fem/dune-fem-dg.git'
  [dune-vem]='dune-fem/dune-vem.git'
)
declare -A extramodules
extramodules=(
  [dune-polygongrid]='extensions/dune-polygongrid.git'
)

#########################################

clonemodule()
{
  m=$1
  p=$2
  v=$4
  t=$4
  echo "cloning called with $m $p $v $t"
  # test if package with this version is already uploaded to pypi
  # if it is no new package will be build and the pypi package is used
  if ! python3 ../testpypi.py $m $v ; then
      echo "Try cloning from $p branch $t"
      git clone --depth 1 -b $t https://gitlab.dune-project.org/$p
      if [ $? ]; then # the branch/tag didn't exist so use master
        if [ $upload = 1 ]; then
          echo "required branch $t not found in $m - this inconsistent state should not be uploaded."
          echo "Rerun test with 'upload=none'."
          exit 1
        fi
        git clone --depth 1 https://gitlab.dune-project.org/$p
      fi
      cd $m
      git log | head
      package $base
      cd ..
  fi
}

#########################################

echo "Cloning core modules into $PWD"
for m in "${!coremodules[@]}" ; do
  p="${coremodules[$m]}"
  clonemodule $m $p $coreversion $coretag
done
echo "Cloning fem modules into $PWD"
for m in "${!femmodules[@]}" ; do
  p="${femmodules[$m]}"
  clonemodule $m $p $femversion $femtag
done
echo "Cloning extra modules into $PWD"
for m in "${!extramodules[@]}" ; do
  p="${extramodules[$m]}"
  clonemodule $m $p $coreversion $coretag
done

#####################################

mv */dist/*.tar.gz ../dist
cd ..

tar cvzf dist/repos.tar.gz repos >/dev/null 2>&1
