coreversion="${1:1}"
femversion="${2:1}"

echo "versions $coreversion, $femversion"
ls .
echo Downloading dune-common into $PWD
git clone --depth 1 -b $1 https://gitlab.dune-project.org/core/dune-common.git
mkdir dist
mkdir repos

package()
{
  # check if the commit in dune-common is tagged. If tagged use the tag as
  # version number (assumes the tag is a valid python package version, i.e., v2.8.0rc1
  # otherwise use the default 'dev' numbering.
  tag=$(git describe --exact-match --tags 2> \dev\null)
  if [ $? -eq 0 ]; then
    echo "Use version" $version
    $packaging --onlysdist --version=$tag
  else
    echo "Use dev versioning"
    $packaging --onlysdist
  fi
}
export packaging=$PWD/dune-common/bin/dunepackaging.py
export -f package

#################################

# download modules into repos
cd repos
declare -A coremodules
coremodules+=(
  [dune-common]='core/dune-common.git'
  [dune-geometry]='core/dune-geometry.git'
  [dune-grid]='core/dune-grid.git'
  [dune-istl]='core/dune-istl.git'
  [dune-localfunctions]='core/dune-localfunctions.git'
  [dune-alugrid]='extensions/dune-alugrid.git'
)
declare -A femmodules
femmodules=(
  [dune-fem]='dune-fem/dune-fem.git'
  [dune-fem-dg]='dune-fem/dune-fem-dg.git'
  [dune-vem]='dune-fem/dune-vem.git'
)
declare -A othermodules
othermodules=(
  [dune-mmesh]='samuel.burbulla/dune-mmesh.git'
)

echo "Cloning core modules into $PWD"
for m in "${!coremodules[@]}" ; do
  p="${coremodules[$m]}"
  echo "module: $m from $p"
  if ! python3 ../testpypi.py $m $coreversion ; then
      echo "Cloning from $p branch $1"
      git clone --depth 1 -b $1 https://gitlab.dune-project.org/$p
      cd $m
      package
      cd ..
  fi
done
echo "Cloning fem modules into $PWD"
for m in "${!femmodules[@]}" ; do
  p="${femmodules[$m]}"
  echo "module: $m from $p"
  if ! python3 ../testpypi.py $m $femversion ; then
      echo "Cloning from $p branch $2"
      git clone --depth 1 -b $2 https://gitlab.dune-project.org/$p
      cd $m
      package
      cd ..
  fi
done
echo "Cloning other modules into $PWD"
for m in "${!othermodules[@]}" ; do
  p="${othermodules[$m]}"
  echo "module: $m from $p"
  echo "Cloning from $p branch $2"
  git clone --depth 1 -b $2 https://gitlab.dune-project.org/$p
  cd $m
  package
  cd ..
done

#####################################

mv */dist/*.tar.gz ../dist
cd ..

tar cvzf dist/repos.tar.gz repos
