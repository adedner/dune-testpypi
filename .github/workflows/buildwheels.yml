name: build wheels 

# Controls when the action will run.
on:
  # schedule test for nightly build
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    # Note: the defaults are repeated within the 'env' section
    #       of some of the jobs so any change to the default
    #       need to be done (at least) twice!
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'Warning'
      download:
        description: 'download location ( dune | lund )'
        required: true
        default: 'dune'
      upload:
        description: 'upload (none | testpypi | pypi)'
        required: true
        default: 'none'
      branch:
        # note: this should be either 'master' or a tag of the form
        #       vN where 'N' is a legal python package version
        #       e.g. N=2.8.0rc1
        #       otherwise the distributions will not be generated
        #       and the build will fail
        description: 'core tag e.g. (master | v2.8.0) [master]'
        required: true
        default: 'master'
      fembranch:
        # note: this should be either 'master' or a tag of the form
        #       vN where 'N' is a legal python package version
        #       e.g. N=2.8.0rc1
        #       otherwise the distributions will not be generated
        #       and the build will fail
        description: 'fem tag e.g. (master | v2.8.0.1) [master]'
        required: true
        default: 'master'

jobs:
  # build packages
  build:
    name: build
    runs-on: [ubuntu-latest]
    env:
      BRANCH: master
      FEMBRANCH: master
      DOWNLOAD: dune
    steps:
      - name: environmentCore
        if: github.event.inputs.branch != ''
        run: echo "BRANCH=${{ github.event.inputs.branch }}" >> $GITHUB_ENV
      - name: environmentFem
        if: github.event.inputs.fembranch != ''
        run: echo "FEMBRANCH=${{ github.event.inputs.fembranch }}" >> $GITHUB_ENV
      - name: environmentDownload
        if: github.event.inputs.download != ''
        run: echo "DOWNLOAD=${{ github.event.inputs.download }}" >> $GITHUB_ENV
      - name: environmentUpload
        if: github.event.inputs.upload != ''
        run: echo "UPLOAD=${{ github.event.inputs.upload }}" >> $GITHUB_ENV
      - name: starting
        uses: actions/checkout@v2
      - name: clone dune branch ${{ env.BRANCH }} and build python packages
        run: |
          set +e
          pip install scikit-build
          ./clone-modules $BRANCH $FEMBRANCH $UPLOAD $DOWNLOAD
      - name: upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: packages
          path: dist

  build_wheels:
    name: Build wheels
    needs: [build]
    runs-on: [ubuntu-latest] 
    #   ${{ matrix.os }}
    #strategy:
    #  matrix:
    #    os: [ubuntu-20.04, windows-2019, macos-10.15]
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.4.0

      - name: upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: packages
          path: ./wheelhouse/*.whl
          #path: dist

  #steps:
  #    - uses: actions/checkout@v2
  #
  #    - name: Build wheels
  #      uses: pypa/cibuildwheel@v2.4.0
  #
  #    - uses: actions/upload-artifact@v2
  #      with:
  #        path: ./wheelhouse/*.whl

  upload_pypi:
    needs: [build, build_wheels]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    #if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - name: Publish package to ${{ env.UPLOAD }}
        uses: pypa/gh-action-pypi-publish@release/v1
        if: ${{ env.UPLOAD == 'pypi' }}
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Publish package to ${{ env.UPLOAD }}
        uses: pypa/gh-action-pypi-publish@release/v1
        if: ${{ env.UPLOAD == 'testpypi' }}
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          ## this is needed so long as versioning for
          ## fem and core packages can differ (i.e. 2.8.0.x) but are uploaded
          ## in same script.
          ## Test if required version for core is available on pypi and use
          ## instead of git?
          # skip_existing: true
          #
