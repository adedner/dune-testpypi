name: upload packages

# Controls when the action will run.
on:
  # schedual test for nightly build
  schedule:
    - cron: "0 0 * * *"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    # Note: the defaults are repeated within the env section
    #       of some of the jobs so any change to the default
    #       need to be done twice!
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'Warning'
      upload:
        description: 'upload (none | testpypi | pypi)'
        required: true
        default: 'none'
      branch:
        # note: this should be either 'master' or a tag of the form
        #       vN where 'N' is a legal python package version
        #       e.g. N=2.8.0rc1
        #       otherwise the distributions will not be generated
        #       and the build will fail
        description: 'tag e.g. (master | v2.8.0rc1) [v2.8.0rc1]'
        required: true
        default: 'v2.8.0rc1'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # build packages
  build:
    name: build
    runs-on: [ubuntu-latest]
    env:
      BRANCH: v2.8.0rc1
    steps:
      - name: environment
        if: github.event.inputs.branch != ''
        run: echo "BRANCH=${{ github.event.inputs.branch }}" >> $GITHUB_ENV
      - name: starting
        uses: actions/checkout@v2
      - name: clone dune branch ${{ env.BRANCH }} and build python packages
        run: |
          pip install scikit-build
          ./clone-modules $BRANCH
      - name: upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: packages
          path: dist

  # test packages
  test:
    name: testing tutorial
    needs: build
    env:
      LOGLEVEL: Warning
    strategy:
        fail-fast: false
        # Note:
        # 1) macOS and python 3.7 is disabled due to linker error
        # 2) macOS does not install petsc4py
        matrix:
            os: [ubuntu-latest, macOS-latest]
            test: [core, extensions]
            python: [3.7,3.9]
    runs-on: ${{ matrix.os }}
    steps:
      - name: starting
        uses: actions/checkout@v2
      - name: environment
        if: github.event.inputs.logLevel != ''
        run: echo "LOGLEVEL=${{ github.event.inputs.logLevel }}" >> $GITHUB_ENV
      - name: setup python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Install dependencies
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt update
            sudo apt install libopenmpi-dev openmpi-bin libsuperlu-dev libsuitesparse-dev petsc-dev paraview python3-paraview gmsh
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew update
            brew install openmpi superlu suite-sparse paraview gmsh
          fi
        shell: bash
      - name: download artifacts
        uses: actions/download-artifact@v2
        with:
          name: packages
          path: dist
      - name: Setup venv
        run: |
          python3 -m venv dune-env
          source dune-env/bin/activate
          pip install --upgrade pip
          pip install matplotlib scipy pygmsh triangle scikit-build
          if [ "$RUNNER_OS" == "Linux" ]; then
            pip install petsc4py
          fi
        shell: bash
      - name: pip install dune modules
        run: |
          source dune-env/bin/activate
          pip install -v --find-links file://$PWD/dist dune-fem
        shell: bash
      - name: Install extension modules
        if: ${{ matrix.test == 'extensions' }}
        run: |
          source dune-env/bin/activate
          pip install -v --find-links file://$PWD/dist dune-fem-dg dune-vem
        shell: bash
      - name: Setup dune-py
        # macOS fails with python 3.7: Symbol not found: _PyCMethod_New
        if: ${{ matrix.python == '3.9' || matrix.os == 'ubuntu-latest' }}
        run: |
          source dune-env/bin/activate
          pip list
          DUNE_CONTROL_PATH=dune-env setup-dunepy.py --opts=config.opts
          python -m dune.fem tutorial
        shell: bash
      - name: Run tutorial
        # macOS fails with python 3.7: Symbol not found: _PyCMethod_New
        if: ${{ matrix.python == '3.9' || matrix.os == 'ubuntu-latest' }}
        run: |
          source dune-env/bin/activate
          export DUNEPY_DISABLE_PLOTTING=1
          export DUNE_LOG_LEVEL=$LOGLEVEL
          cd fem_tutorial
          python ../run-tutorial.py ${{ matrix.test }}
        shell: bash

  # https://github.com/marketplace/actions/pypi-publish
  upload:
    name: uploading
    env:
      UPLOAD: none
    needs: test
    runs-on: [ubuntu-latest]
    steps:
      - name: environment
        if: github.event.inputs.upload != ''
        run: echo "UPLOAD=${{ github.event.inputs.upload }}" >> $GITHUB_ENV
      - name: download artifacts
        uses: actions/download-artifact@v2
        with:
          name: packages
          path: dist
      - name: Publish package to ${{ env.UPLOAD }}
        uses: pypa/gh-action-pypi-publish@release/v1
        if: ${{ env.UPLOAD == 'pypi' }}
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
      - name: Publish package to ${{ env.UPLOAD }}
        uses: pypa/gh-action-pypi-publish@release/v1
        if: ${{ env.UPLOAD == 'testpypi' }}
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
